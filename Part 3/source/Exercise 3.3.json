{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating an algorithm for embedding hidden messages in the nth LSB of an audio signal, based on audio steganography"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This exercise shows two functions `hideTextInNthLSB` and `extractTextFromNthLSB` capable of storing and retrieving a message into a sound file, using the nth LSB of each byte of the sound data, base don the audio steganography algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import wave"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function `hideTextInNthLSB`performs the following steps:\n",
    "1. Check that the position is an integer value between 1 and 7. This is to make sure that it indicates a correct position within a byte. The value 8 is excluded only to maintain the value of the MSB of each byte.\n",
    "2. Open an audio file\n",
    "3. Read the content of the file into a bytearray\n",
    "4. Pad the input text to hide with a filling character, so that the length in bit of the text equals the length in bytes of the bytearray\n",
    "5. convert the text into a bit array\n",
    "6. for each bit in the text bit array, take the corresponding byte from the sound's byte array and set to 0 the nth bit from the right (the nth LSB), then, left bitwise shift the bit by n places, so that it is located on the nth digit, and finally, doing a bitwise OR, sets the nth LSB bit of the frame_byte, to the value in bit.\n",
    "7. Save the byte array into a new file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hideTextInNthLSB(sFile, dFile, text, position):\n",
    "    assert position > 0 and position < 8, 'Position must be an integer between 1 and 7'\n",
    "    \n",
    "    # read wave audio file\n",
    "    song = wave.open(sFile, mode='rb')\n",
    "    # Read frames and convert to byte array\n",
    "    frame_bytes = bytearray(list(song.readframes(song.getnframes())))\n",
    "    song.close()\n",
    "    \n",
    "    # Append dummy data to fill out rest of the bytes. Receiver shall detect and remove these characters.\n",
    "    text = text + int((len(frame_bytes)-(len(text)*8*8))/8) *'#'\n",
    "    # Convert text to bit array\n",
    "    bits = list(map(int, ''.join([bin(ord(i)).lstrip('0b').rjust(8,'0') for i in text])))\n",
    "    \n",
    "    # Replace the second LSB of each byte of the audio data by one bit from the text bit array\n",
    "    \n",
    "    for i, bit in enumerate(bits):\n",
    "        #for each bit in bits, take the corresponding frame_byte and set to 0 the nth bit from the right (the second LSB)\n",
    "        #then, left bitwise shift the bit by n places, so that it is located on the nth digit\n",
    "        #finally, doing a bitwise OR, sets the nth LSB bit of the frame_byte, to the value in bit.\n",
    "        frame_bytes[i] = (frame_bytes[i] & (255 - 2**position)) | bit << position \n",
    "    # Get the modified bytes\n",
    "    frame_modified = bytes(frame_bytes)\n",
    "    with wave.open(dFile, 'wb') as fd:\n",
    "        fd.setparams(song.getparams())\n",
    "        fd.writeframes(frame_modified)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function `hideTextInNthLSB` performs the following steps:\n",
    "\n",
    "1. Check that the position is an integer value between 1 and 7. This is to make sure that it indicates a correct position within a byte. The value 8 is excluded only to maintain the value of the MSB of each byte.\n",
    "2. open the audio file containing the hidden message\n",
    "3. Read the content of the file into a bytearray\n",
    "4. Extract the nth LSB of each byte in byteArray into a bitArray: for each byte in byteArray, doing a bitwise AND with 2<sup>n</sup> (which has a 1 in the nth digit), extracts the values; however, this value is still in the nth LSB and we need to move it to the first LSB; we do this by performing a right bitwise shift of n position.\n",
    "5. Convert the bitArray into a string\n",
    "6. Discard all the padding characters\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def extractTextFromNthLSB(sFile, position):\n",
    "    \n",
    "    assert position > 0 and position < 8, 'Position must be an integer between 1 and 7'\n",
    "        \n",
    "    sound = wave.open(sFile, mode='rb')\n",
    "    \n",
    "    #Convert the audio to byte array\n",
    "    byteArray = bytearray(list(sound.readframes(sound.getnframes())))\n",
    "    sound.close()\n",
    "    #Extract the second LSB of each byte in byteArray\n",
    "    #for each byte in byteArray, doing a bitwise AND with 2<sup>n</sup> (which has a 1 in the nth digit), extracts the values;\n",
    "    #however, this value is still in the nth LSB and we need to move it to the first LSB\n",
    "    #we do this performing a right bitwise shift of n position\n",
    "    lsbArray = [(byteArray[i] & 2**position) >> position for i in range(len(byteArray))]\n",
    "    #Convert byte array back to string\n",
    "    string = \"\".join(chr(int(\"\".join(map(str,lsbArray[i:i+8])),2)) for i in range(0,len(lsbArray),8))\n",
    "    #Split the string excluding the filling characters (#). Element at 0 is our message\n",
    "    decoded = string.split(\"#\")[0]\n",
    "    return decoded"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that: \n",
    "- In order for this algorithm to work well, both functions have to use the same position, otherwise no message will be retrieved.\n",
    "- Position must be an integer value from 1 to 7.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's try this algorithm with a position = 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Father Christmas does not exist\n"
     ]
    }
   ],
   "source": [
    "sFile = 'Ex3_sound5.wav'\n",
    "dFile = 'Ex3_sound5_hidden.wav'\n",
    "text = 'Father Christmas does not exist'\n",
    "\n",
    "hideTextInNthLSB(sFile, dFile, text, 3)\n",
    "\n",
    "print(extractTextFromNthLSB(dFile, 3))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
